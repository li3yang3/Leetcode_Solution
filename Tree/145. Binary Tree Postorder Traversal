Given a binary tree, return the postorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [3,2,1].


解题思路：1.递归法 2.迭代法

知识点：

递归法：
public class Solution {
    List<Integer> traversal = new ArrayList<>();
    public List<Integer> postorderTraversal(TreeNode root) {
          postorder(root);   
          return traversal;
    }
    void postorder(TreeNode root){
        if(root != null){
        
        postorder(root.left);
        postorder(root.right);
        traversal.add(root.val);
        }
    }   
}

迭代法：
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
     LinkedList<Integer> list = new LinkedList<Integer>();
    
    Stack<TreeNode> stack = new Stack<TreeNode>();
    TreeNode cur = root;
    
    while(cur != null || !stack.empty()) {
        while(cur != null) {
            list.addFirst(cur.val);
            stack.add(cur);
            cur = cur.right;
        }
        cur = stack.pop();
        cur = cur.left;
    }
    return list;   
    }
}
