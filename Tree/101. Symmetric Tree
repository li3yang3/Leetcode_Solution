Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

解题思路：to check the pair nodes,whether the left.left and right.right equal,if not return false,,whether left.right and right.left 
equal.If there is one null node,return false,two null node return true.

recursive:

public class Solution {
    public boolean isSymmetric(TreeNode root) {
    return root==null || isSymmetricHelp(root.left, root.right);
}

    private boolean isSymmetricHelp(TreeNode left, TreeNode right){
    if(left==null || right==null)                                        //若某一个为Null返回false,若两个为null返回true;
        return left==right;
    if(left.val!=right.val)                                              //值不相等返回false;
        return false;
    return isSymmetricHelp(left.left, right.right) && isSymmetricHelp(left.right, right.left);    //不断递归遍历用左左点和右右点，左右点和                                                                                                   右左点比较
}
}

iterative:

 public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        if(root == null) return true;
        q.add(root.left);
        q.add(root.right);
        while(q.size() > 1){
            TreeNode left = q.poll(),                             //依次输入两两需比较点
                     right = q.poll();
            if(left== null&& right == null) continue;             //均为空则继续比较下两个点
            if(left == null ^ right == null) return false;        //其中一个为空则return false
            if(left.val != right.val) return false;               //值不相等return false
            q.add(left.left);                                    //按照queue的输出顺利，依次添加相邻需比较点进入queue
            q.add(right.right);
            q.add(left.right);
            q.add(right.left);            
        }
        return true;
    }
